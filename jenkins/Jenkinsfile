node {
      try{
            notifyBuild('STARTED')
            stage('Prep')
            {
                        
            }
            stage('Build') {
                    echo 'SCM....'
                    git credentialsId: 'tom.halpin@dxc.com', url: 'https://github.com/tom-halpin/AnsibleCICD'

                    echo 'Building....'
                }
            stage('Ansible Syntax Checker') {
                echo 'Running ansible-playbook --syntax-check ...'
                //command to run ansible-playbook in syntax checker mode the parameter required is the path where the playbooks are stored
                sh 'ansible-playbook --syntax-check ansible/*.yml'
            }            
            /*stage('Ansible Lint') {
                echo 'Running ansible-lint ...'
                //command to run ansible-lint the parameter required is the path where the playbooks are stored
                sh 'ansible-lint ansible/*.yml'
            }*/
            stage('Ansible Check - Dry Run') {
                echo 'Running ansible-playbook --check ...'
                //command to run ansible-playbook in syntax checker mode the parameter required is the path where the playbooks are stored
                sh 'ansible-playbook --check ansible/*.yml'
            }             
            stage('YAML Lint') {
                echo 'Running yamllint ...'
                //command to run yamllint the parameter required is the path where the playbooks are stored
                sh 'yamllint cft/*.*'
            }      
            /*stage ("Molecule Lint") {
               echo 'Running Molecule Lint ...'
                  sh 'molecule lint'
        }*/
            stage('Deploy') {
                echo 'Deploying....'
            }
    } catch(all) {
        currentBuild.result = "FAILURE"
        throw err
  } finally {
    // Success or failure, always send notifications
    notifyBuild(currentBuild.result)
  }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: serviceagent)
}
